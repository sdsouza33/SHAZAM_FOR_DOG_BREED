import cv2
import pandas as pd
import numpy as np
import scipy
import h5py
import keras
import time
import tensorflow as tf
from keras.applications.imagenet_utils import preprocess_input
from PIL import Image
from sklearn.metrics import accuracy_score
from keras.applications.resnet50 import ResNet50
from keras.layers import Input
from keras.models import Model
from keras.layers import GlobalAveragePooling2D,Dense,Dropout,Activation,Flatten
import os
import cv2
import numpy as np
from tqdm import tqdm
import pandas as pd
import keras
from PIL import Image

import os

import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.constraints import maxnorm
from keras.optimizers import SGD
from keras.layers import Activation
from keras.layers.convolutional import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers.normalization import BatchNormalization
from keras.initializers import glorot_normal
from keras.utils import np_utils

from keras import backend as K
from keras.datasets import cifar10

from sklearn.externals import joblib
from django.core.cache import cache
from keras.models import load_model

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
print("Starting to Load model .h5 file")
new_model = load_model('final_1.h5')

print("Model Loaded")
global graph
graph = tf.get_default_graph()



def detect(img1):
    if img1=='default.jpg':
        return 'Please give a proper image'
    else:    
        print("IMAGE++++++++>>>>>",img1)
        print("Loading lables")
        df = pd.read_csv('K:/Resnet50/labels.csv')
        print("labels loaded")

        n = len(df)
        breed = set(df['breed'])
        n_class = len(breed)
        class_to_num = dict(zip(breed, range(n_class)))
        num_to_class = dict(zip(range(n_class), breed))
        breed=list(breed)
        width = 256
        
        pred=[]
        I_p='K:/Resnet50/train/'
        PATH=os.path.join(I_p,str(img1))
        print(PATH)
        img=np.expand_dims(cv2.resize(cv2.imread(PATH),(width,width)),axis=0)

        with graph.as_default():
        
            Y_pred = new_model.predict(img, verbose=2)
        y_pred = np.argmax(Y_pred, axis=1)
        #custom_model.predict()
        for i in y_pred:
            pred.append(breed[i])

                            
        return ' '.join(pred)